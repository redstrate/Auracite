name: Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  QT_VERSION: 6.6

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}.*"
          cache: true
          modules: 'qtshadertools'
      - name: Setup Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            gettext \
            gperf \
            libwayland-dev
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "prefix-dir=${{ github.workspace }}/prefix" >> "$GITHUB_OUTPUT"
      - name: Cache Prefix
        id: cache-prefix-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.strings.outputs.prefix-dir }}
          key: ${{ runner.os }}-prefix
      - name: Build Extra CMake Modules
        if: steps.cache-prefix-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://invent.kde.org/frameworks/extra-cmake-modules.git
          cmake -B ${{ steps.strings.outputs.build-output-dir }}-ECM -DCMAKE_PREFIX_PATH=${{ steps.strings.outputs.prefix-dir }} -S extra-cmake-modules -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.prefix-dir }} -DBUILD_TESTING=OFF
          cmake --build ${{ steps.strings.outputs.build-output-dir }}-ECM --target install
          cmake --install ${{ steps.strings.outputs.build-output-dir }}-ECM
      - name: Configure KI18n
        if: steps.cache-prefix-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://invent.kde.org/frameworks/ki18n.git
          cmake -B ${{ steps.strings.outputs.build-output-dir }}-ki18n -DCMAKE_PREFIX_PATH=${{ steps.strings.outputs.prefix-dir }} -S ki18n -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.prefix-dir }} -DBUILD_TESTING=OFF
      - name: Build KI18n
        if: steps.cache-prefix-restore.outputs.cache-hit != 'true'
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }}-ki18n --target install
      - name: Build KCoreAddons
        if: steps.cache-prefix-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://invent.kde.org/frameworks/kcoreaddons.git
          cmake -B ${{ steps.strings.outputs.build-output-dir }}-kca -DCMAKE_PREFIX_PATH=${{ steps.strings.outputs.prefix-dir }} -S kcoreaddons -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.prefix-dir }} -DBUILD_TESTING=OFF
          cmake --build ${{ steps.strings.outputs.build-output-dir }}-kca --target install
      - name: Save Prefix
        id: cache-prefix-save
        uses: actions/cache/save@v4
        if: steps.cache-prefix-restore.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.strings.outputs.prefix-dir }}
          key: ${{ steps.cache-prefix-restore.outputs.cache-primary-key }}
      - name: Build
        run: |
          export KDE_INCLUDEDIR=${{ github.workspace }}/../prefix/include
          export KDE_LIBDIR=${{ github.workspace }}/../prefix/lib64
          cargo build --verbose
      - name: Run clippy
        run: cargo clippy
